import java.util.regex.Matcher
import java.util.regex.Pattern

apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'maven-publish'

android {
    namespace "ai.elimu.launcher"
    compileSdk 35

    defaultConfig {
        applicationId "ai.elimu.launcher"
        minSdkVersion 26
        targetSdkVersion 35
        versionCode 2001041
        versionName "2.1.41-SNAPSHOT"
        testInstrumentationRunner("androidx.test.runner.AndroidJUnitRunner")
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            manifestPlaceholders = [appstoreApplicationId: "ai.elimu.appstore.debug"]
            buildConfigField("String", "APPSTORE_APPLICATION_ID", '"ai.elimu.appstore.debug"')
            buildConfigField("String", "ANALYTICS_APPLICATION_ID", '"ai.elimu.analytics.debug"')
        }
        release {
            manifestPlaceholders = [appstoreApplicationId: "ai.elimu.appstore"]
            buildConfigField("String", "APPSTORE_APPLICATION_ID", '"ai.elimu.appstore"')
            buildConfigField("String", "ANALYTICS_APPLICATION_ID", '"ai.elimu.analytics"')
        }
    }

    buildFeatures {
        buildConfig = true
        viewBinding true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation(libs.elimu.appstore) // https://jitpack.io/#ai.elimu/appstore

    implementation(libs.timber)
    implementation(libs.androidx.appcompat)
    implementation(libs.androidx.constraint.layout)
    implementation(libs.androidx.viewpager)
    implementation(libs.dots.indicator)
    implementation(libs.material.dialog)

    testImplementation libs.junit
    androidTestImplementation libs.android.test.espresso
}

publishing {
    publications {
        apk(MavenPublication) {
            artifact("${buildDir}/outputs/apk/release/app-release-unsigned.apk")
        }
    }
}
tasks.named("publishApkPublicationToMavenLocal") {
    mustRunAfter(":app:assembleRelease")
}

tasks.register('removeSnapshot') {
    doLast {
        println("removeSnapshot")

        def file = file("build.gradle")
        def originalFileContent = file.getText()

        Pattern pattern = Pattern.compile("versionName \"\\d+\\.\\d+\\.\\d+-SNAPSHOT\"")
        Matcher matcher = pattern.matcher(originalFileContent)
        matcher.find()
        println("match: ${matcher.group()}")

        def newVersionName = matcher.group().replace("-SNAPSHOT", "")
        println("newVersionName: ${newVersionName}")

        def newFileContent = originalFileContent.replaceFirst("versionName \"\\d+\\.\\d+\\.\\d+-SNAPSHOT\"", newVersionName)
        file.write(newFileContent)
    }
}
tasks.register('getVersionName') {
    doLast {
        println android.defaultConfig.versionName
    }
}
tasks.register('bumpVersion') {
    doLast {
        println("bumpVersion")

        def currentVersionCode = android.defaultConfig.versionCode
        println("currentVersionCode: ${currentVersionCode}")

        def newVersionCode = currentVersionCode + 1
        println("newVersionCode: ${newVersionCode}")

        def newVersionName = newVersionCode.toString().substring(0, 1).toInteger() + "." + newVersionCode.toString().substring(1, 4).toInteger() + "." + newVersionCode.toString().substring(4, 7).toInteger()
        println("newVersionName: ${newVersionName}")

        def file = file("build.gradle")
        def originalFileContent = file.getText()
        def newFileContent = originalFileContent.replaceFirst("versionCode \\d+", "versionCode ${newVersionCode}")
        newFileContent = newFileContent.replaceFirst("versionName \"\\d+\\.\\d+\\.\\d+\"", "versionName \"${newVersionName}\"")
        file.write(newFileContent)
    }
}
tasks.register('addSnapshot') {
    doLast {
        println("addSnapshot")

        def file = file("build.gradle")
        def originalFileContent = file.getText()

        Pattern pattern = Pattern.compile("versionName \"\\d+\\.\\d+\\.\\d+\"")
        Matcher matcher = pattern.matcher(originalFileContent)
        matcher.find()
        println("match: ${matcher.group()}")

        def newVersionName = "${matcher.group().substring(12, matcher.group().length() - 1)}-SNAPSHOT\""
        println("newVersionName: ${newVersionName}")

        def newFileContent = originalFileContent.replaceFirst("versionName \"\\d+\\.\\d+\\.\\d+\"", "versionName ${newVersionName}")
        file.write(newFileContent)
    }
}
